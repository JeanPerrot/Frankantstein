apply plugin: 'java'
apply plugin: 'idea'
sourceCompatibility = '1.6'
targetCompatilibity = '1.6'

import groovyx.gpars.GParsPool
import groovy.json.JsonSlurper

buildscript {
	repositories {
		mavenCentral()
	}
	
	dependencies {
		classpath 'org.codehaus.gpars:gpars:0.12'
		classpath 'org.codehaus.groovy:groovy-all:1.8.3'
	}
}

repositories {
	mavenCentral()
}

dependencies {
    testCompile('junit:junit:4.8.1')
}

jar {
    baseName = 'MyBot'
    manifest {
        attributes("Main-Class": "MyBot")
    }
}

task srcZip(type: Zip) {
    classifier = 'src'
    from sourceSets*.allSource
    excludes = ["**/*Test.java"]
}

task rate(dependsOn: jar) << {
	def bots = ["zombie", "merv-v3", "flightBot-v6", "merv-v11", "MyBot-5"] 
	def maps = ["random_walk/random_walk_02p_01", "multi_hill_maze/maze_02p_01", "maze/maze_02p_01"]

//	def bots = ["zombie"] 
//	def maps = ["random_walk/random_walk_02p_01"]

	def gameId = 100;
	
	def pairings = bots.collect { bot -> maps.collect { map -> [id:gameId++, bot:bot, map:map] } }.flatten()
	
	def nextGameIdToDisplay = 100;
	
	def poolSize = (int)Math.ceil(Runtime.getRuntime().availableProcessors()/2)
	println "Using a pool size of $poolSize (two cores per game)"
	
	println()
	println "Results:"
	println "GameId\tRating\tResult\tTurns\tBot      \t${'Map'.padRight(30, ' ')}\tReplay\tLog\tStatus"
	
	def undisplayed = []
	undisplayed.addAll(pairings)
	
	GParsPool.withPool(poolSize) {
		pairings.eachParallel { pairing ->
/*			println "START Game $pairing.id Map $pairing.map Vs $pairing.bot..."*/
			def process = ["python",
				"tools/playgame.py",
				"java -jar bots/${pairing.bot}.jar",
				"java -jar build/libs/MyBot.jar",
				"--map_file",
				"tools/maps/${pairing.map}.map",
				"--log_dir",
				"game_logs",
				"--game=${pairing.id}",
				"--turns",
				"1000",
				"--player_seed",
				"7",
				"--engine_seed=1234",
				"-E",
				"--nolaunch"].execute()
			process.consumeProcessOutput()
			process.waitFor()
			
			def json = new JsonSlurper().parseText(new File("game_logs/${pairing.id}.replay").text)
			pairing.status = [us:json.status[1], them:json.status[0]]
			pairing.turns = json.playerturns[0]
			if (json.score[1] > json.score[0]) {
				pairing.result = "WIN"
				pairing.rating = 1 - pairing.turns/2000
			} else  if (json.score[1] == json.score[0]) {
				pairing.result = "DRAW"
				pairing.rating = 0
			} else {
				pairing.result = "LOSE"
				pairing.rating = -1 + pairing.turns/2000
			}
/*			println "\tEND Game $pairing.id Map $pairing.map Vs $pairing.bot! ($pairing)"*/
/*			println "$pairing.rating\t$pairing.result\t$pairing.turns\t${pairing.bot.padRight(10, ' ')}\t$pairing.map"*/
			
			while(undisplayed && undisplayed[0].result) {
				pairing = undisplayed.remove(0)
				println "${pairing.id}\t$pairing.rating\t$pairing.result\t$pairing.turns\t${pairing.bot.padRight(10, ' ')}\t${pairing.map.padRight(30, ' ')}\tview${pairing.id}\tlog${pairing.id}\t${pairing.status.findAll { !(it.value in ['survived', 'eliminated']) }}"
			}
		}
	}
	println()

//	pairings.each { pairing -> println "${pairing.id}\t$pairing.rating\t$pairing.result\t$pairing.turns\t${pairing.bot.padRight(10, ' ')}\t${pairing.map.padRight(30, ' ')}\tview${pairing.id}\tlog${pairing.id}\t${pairing.status.findAll { !(it.value in ['survived', 'eliminated']) }}" }
	def ratingByMap = pairings.groupBy { it.map }.collectEntries { [it.key, it.value.sum { it.rating } / it.value.size()] }
	def ratingByBot = pairings.groupBy { it.bot }.collectEntries { [it.key, it.value.sum { it.rating } / it.value.size()] }
	
	println()
	
	ratingByMap.each { map, rating -> println "Rating on ${map.padRight(30, ' ')} = $rating" }
	
	println()
	
	ratingByBot.each { bot, rating -> println "Rating vs ${bot.padRight(15, ' ')} = $rating" }
	
	def rating = pairings.sum { pairing -> pairing.rating } / pairings.size()
	
	println()
	println "Overall Rating = $rating"
}

// java -jar tools/visualizer.jar game_logs/101.replay

tasks.addRule("Pattern: view<GameID>") { String taskName ->
    if (taskName.startsWith("view")) {
        task(taskName) << {
			"java -jar tools/visualizer.jar game_logs/${taskName - 'view'}.replay".execute().waitFor()
        }
    }
}

tasks.addRule("Pattern: log<GameID>") { String taskName ->
    if (taskName.startsWith("log")) {
        task(taskName) << {
			println new File("game_logs/${taskName - 'log'}.bot1.error").text
        }
    }
}